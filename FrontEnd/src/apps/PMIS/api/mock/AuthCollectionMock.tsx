// src/api/AuthCollectionMock.tsx

import type {
  LoginRequest,
  LoginResponse,
  ValidateTokenResponse,
} from '../../models/auth';

// const PREFIX = '/api/Auth';

// ðŸŸ¢ Ù…ÙˆÚ© ØªØ§Ø¨Ø¹ login
export const login = async (payload: LoginRequest): Promise<LoginResponse> => {
  console.warn('Mock: login with', payload);

  return Promise.resolve({
    accessToken: 'mock-token-1234567890',
    expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // ÛŒÚ© Ø³Ø§Ø¹Øª Ø¨Ø¹Ø¯
  });
};

// ðŸŸ¡ Ù…ÙˆÚ© ØªØ§Ø¨Ø¹ logout
export const logout = async (): Promise<void> => {
  console.warn('Mock: logout');
  return Promise.resolve();
};

// ðŸ”µ Ù…ÙˆÚ© ØªØ§Ø¨Ø¹ validateToken
export const validateToken = async (): Promise<ValidateTokenResponse> => {
  console.warn('Mock: validateToken');

  return Promise.resolve({
    isValid: true,
    userId: 'user-001',
    roles: ['Admin', 'Operator'],
  });
};

// ðŸŸ£ Ù…ÙˆÚ© ØªØ§Ø¨Ø¹ getUserName
export const getUserName = async (): Promise<string> => {
  console.warn('Mock: getUserName');
  return Promise.resolve('ØªØ³Øªâ€ŒÚ©Ø§Ø±Ø¨Ø±');
};
